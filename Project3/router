#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket
import os

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"     

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.asn = asn
    self.routes = [] 
    self.updates = []
    self.revocation = []
    self.relations = {}
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def decimalToBinaryString(self, ip):
    """ converts a given ip string to a binary string """
    binary = ".".join([bin(int(x)+256)[3:] for x in ip.split('.')])
    return str(binary)

  def findLongestPrefix(self, daddr):
    """ returns network(s) with the longest prefix between the daddr and all values in our routing table """
    potentialRoutes = []
    longestPrefix = 0
    for route in self.routes:
      #print("comparing: " + str(daddr) + " against: " + str(addr))
      prefix = os.path.commonprefix([self.decimalToBinaryString(daddr), self.decimalToBinaryString(route["network"])])
      #print("common prefix: " + str(prefix))
      if len(prefix) > longestPrefix:
        longestPrefix = len(prefix)
        potentialRoutes = [route]
      elif len(prefix) == longestPrefix:
        potentialRoutes.append(route)
    return potentialRoutes

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = self.findLongestPrefix(daddr)
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    if len(routes) == 0:
      return []
    outroutes = []
    # assuming there will always be one route in the list given
    shortestRoute = len(routes[0]["ASPath"])
    # find the shortest route
    for i in range(len(routes)):
      currentRoute = len(routes[i]["ASPath"])
      if currentRoute < shortestRoute:
        shortestRoute = currentRoute
    # add shortest routes to output
    for i in range(len(routes)):
      currentRoute = len(routes[i]["ASPath"])
      if currentRoute == shortestRoute:
        outroutes.append(routes[i])
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    if len(routes) == 0:
      return []
    outroutes = []
    # assuming there will always be one route in the list given
    highestPreference = routes[0]["localpref"]
    # find the highest preference
    for i in range(len(routes)):
      currentPreference = routes[i]["localpref"]
      if currentPreference > highestPreference:
        highestPreference = currentPreference
    # add routes with highest preference to output
    for i in range(len(routes)):
      currentPreference = routes[i]["localpref"]
      if currentPreference == highestPreference:
        outroutes.append(routes[i])
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    selfOrigin = []
    notSelfOrigin = []
    for i in range(len(routes)):
      if routes[i]["selfOrigin"]:
        selfOrigin.append(routes[i])
      else:
        notSelfOrigin.append(routes[i])
    if len(selfOrigin) > 0:
      return selfOrigin
    else:
      return notSelfOrigin

  def get_origin_routes(self, routes):
    """ select origin routes: IGP > EGP > UNK """
    egp = []
    igp = []
    unk = []
    # Populate fields above with respective routes
    for i in range(len(routes)):
      if routes[i]["origin"] == "EGP":
        egp.append(routes[i])
      elif routes[i]["origin"] == "IGP":
        igp.append(routes[i])
      else:
        unk.append(routes[i])
    if igp != []:
      return igp
    elif egp != []:
      return egp
    else:
      return unk

  def get_lowest_ip(self, routes):
    """ returns the lowest IP addrest in the given routes """
    outroutes = []
    currentLowest = -1
    for route in routes:
      currentIP = int("".join(route["peer"].split(".")))
      if currentLowest == -1 or currentIP > currentLowest:
        outroutes = [route]
      elif currentIP == currentLowest:
        outroutes.append(route)
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    # TODO
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    routes = self.lookup_routes(daddr)
    #print("0: " + str(routes))
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      #print("1: " + str(routes))
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      #print("2: " + str(routes))
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      #print("3: " + str(routes))
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      #print("4: " + str(routes))
      # 5. Lowest IP Address
      routes = self.get_lowest_ip(routes)
      #print("5: " + str(routes))
      # Final check: enforce peering relationships
      #routes = self.filter_relationships(srcif, routes)
    peer = None
    if routes:
      peer = routes[0]["peer"]
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    socket = self.sockets[srcif]
    data = json.dumps(packet)
    socket.sendall(data.encode())
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def forwardUpdate(self, srcif, destinationIP, msg):
    newUpdate = {
      "type": "update",
      "src": srcif,
      "dst": destinationIP,
      "msg": msg
    }
    self.forward(destinationIP, newUpdate)

  def update(self, srcif, packet):
    """ handle update packets """
    message = packet["msg"]

    # 1) save a copy of the announcement in case we need it later
    self.updates.append(packet)

    # 2) add an entry to our forwarding table
    self.routes.append({ 
      "network": message["network"], 
      "netmask": message["netmask"], 
      "localpref": message["localpref"], 
      "ASPath": message["ASPath"], 
      "origin": message["origin"], 
      "selfOrigin": message["selfOrigin"],
      "peer": packet["src"]
      })

    # 3) potentially send copies of the announcement to neighboring routers 
    # Currently sends packet to all other connections
    newASPath = message["ASPath"]
    newASPath.append(self.asn)
    messageToNeighbors = { 
      "network": message["network"], 
      "netmask": message["netmask"], 
      "localpref": message["localpref"], 
      "ASPath": newASPath, 
      "origin": message["origin"], 
      "selfOrigin": message["selfOrigin"]
    }
    for neighborIP in self.sockets:
      if not neighborIP == packet["src"]:
        self.forwardUpdate(neighborIP[:-1] + "1", neighborIP, messageToNeighbors)

    # TODO
    #   a) update received from a customer: send updates to all other neighbors
    #   b) update received from a peer or provider: only send updates to our customers
    return False

  def send_new_packet(self, socket, packet):
    packetCopySrc = ('.').join(socket.split('.', 3)[:3]) + '.1'
    packet[SRCE] = packetCopySrc
    packet[DEST] = socket
    self.sockets[socket].sendall(json.dumps(packet).encode())

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    # 1) save a copy of the revocation, in case we need it later

    message = packet["msg"]

    # 1) save a copy of the announcement in case we need it later
    self.revocation.append(packet)

    packetCopy = packet
    # 2) remove the dead entry from the forwarding table
    for index in range(0,len(self.routes)):
      print(self.routes[index])
      tempRoute = self.routes[index]
      print(tempRoute["network"])
      print(message)
      if tempRoute["network"] == message[0]["network"]:
        self.routes.pop(index)
      
    # 3) potentially send copies of the announcement to neighboring routers
    revokeRelation = self.relations[packet["src"]]
    
    if revokeRelation == "cust":
      #customer
      # a) update received from a customer: send revoke to all other neighbors
      for key in self.sockets:
        if key != packet["src"]:
          self.send_new_packet(key, packetCopy)
    elif revokeRelation == "prov" or revokeRelation == "peer":
      #provider & peer
      # b) update received from a peer or provider: only send revoke to our customers
      for key in self.sockets:
        socketRelation = self.relations[socket]
        for key in self.sockets:
          if socketRelation == "cust":
            self.send_new_packet(key, packetCopy)
    return True

  def dump(self, packet):
    """ handles dump table requests """
    dumpMessage = []
    for route in self.routes:
      dumpMessage.append({
        "network": route["network"],
        "netmask": route["netmask"],
        "peer": route["peer"]
      })
    dumpPacket = {
      "src":  packet["dst"],          
      "dst":  packet["src"],         
      "type": "table",                   
      "msg": dumpMessage
    }
    print("dumping: " + str(dumpMessage))
    self.forward(packet["src"], dumpPacket)
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    messageType = packet["type"]
    if messageType == "update":
      return self.update(srcif, packet)
    elif messageType == "revoke":
      return self.revoke(packet)
    elif messageType == "data":
      socket = self.get_route(srcif, packet["dst"])
      if socket:
        data = json.dumps(packet)
        socket.sendall(data.encode())
      else:
        data = {
          "src":  srcif,         
          "dst":  packet["src"],          
          "type": "no route",                   
          "msg":  {}
        }
        self.forward(srcif, data)
      return 
    elif messageType == "no route":
      return 
    elif messageType == "dump":
      self.dump(packet)
      return
    elif messageType == "table":
      return
    else:
      return
    
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
