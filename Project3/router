#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"     

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.asn = asn
    self.routes = {} # { network: num, netmask: num, localpref: num, ASPath: [], origin: string, selfOrigin: boolean }
    self.updates = {}
    self.relations = {}
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = []
    prefix = daddr[:3]
    for addr in self.routes:
      if prefix == addr[:3]:
        outroutes.append(self.routes[addr])
    # TODO need to catch unknown daddr
    print("Initial lookup routes: " + str(outroutes))
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    outroutes = []
    # assuming there will always be one route in the list given
    shortestRoute = len(routes[0]["ASPath"])
    # find the shortest route
    for i in range(len(routes)):
      currentRoute = len(routes[i]["ASPath"])
      if currentRoute < shortestRoute:
        shortestRoute = currentRoute
    # add shortest routes to output
    for i in range(len(routes)):
      currentRoute = len(routes[i]["ASPath"])
      if currentRoute == shortestRoute:
        outroutes.append(routes[i])
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    outroutes = []
    # assuming there will always be one route in the list given
    highestPreference = routes[0]["localpref"]
    # find the highest preference
    for i in range(len(routes)):
      currentPreference = routes[i]["localpref"]
      if currentPreference > highestPreference:
        highestPreference = currentPreference
    # add routes with highest preference to output
    for i in range(len(routes)):
      currentPreference = routes[i]["localpref"]
      if currentPreference == highestPreference:
        outroutes.append(routes[i])
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    outroutes = []
    # every route in the range with selfOrigin true gets added to output
    for i in range(len(routes)):
      if routes[i]["selfOrigin"]:
        outroutes.append(routes[i])
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    egp = []
    igp = []
    unk = []
    # Populate fields above with respective routes
    for i in range(len(routes)):
      if routes[i]["origin"] == "EGP":
        egp.append(routes[i])
      elif routes[i]["origin"] == "IGP":
        igp.append(routes[i])
      else:
        unk.append(routes[i])
    if egp != []:
      return egp
    elif igp != []:
      return igp
    else:
      return unk

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    # TODO
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    routes = self.lookup_routes(daddr)
    print("From lookup_routes: " + str(routes))
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # print("1) highest: " + str(routes))
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # print("2) self-origin" + str(routes))
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # print("3) ASPath: " + str(routes))
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # print("4) origin routes: " + str(routes))
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      #routes = self.filter_relationships(srcif, routes)

    print("Filtered routes: " + str(routes))
    peer = None
    if routes:
      peer = routes[0]["peer"]
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    socket = self.sockets[srcif]
    data = json.dumps(packet)
    socket.sendall(data.encode())
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def forwardUpdate(self, srcif, destinationIP, msg):
    newUpdate = {
      "type": "update",
      "src": srcif,
      "dst": destinationIP,
      "msg": msg
    }
    self.forward(destinationIP, newUpdate)

  def update(self, srcif, packet):
    """ handle update packets """
    message = packet["msg"]

    # 1) save a copy of the announcement in case we need it later
    self.updates[packet["src"]] = message

    # 2) add an entry to our forwarding table
    self.routes[packet["dst"]] = { 
      "network": message["network"], 
      "netmask": message["netmask"], 
      "localpref": message["localpref"], 
      "ASPath": message["ASPath"], 
      "origin": message["origin"], 
      "selfOrigin": message["selfOrigin"],
      "peer": packet["src"]
      }

    # 3) potentially send copies of the announcement to neighboring routers 
    # Currently sends packet to all other connections
    newASPath = message["ASPath"]
    newASPath.append(self.asn)
    messageToNeighbors = { 
      "network": message["network"], 
      "netmask": message["netmask"], 
      "localpref": message["localpref"], 
      "ASPath": newASPath, 
      "origin": message["origin"], 
      "selfOrigin": message["selfOrigin"]
    }
    for neighborIP in self.sockets:
      if not neighborIP == packet["src"]:
        self.forwardUpdate(neighborIP[:-1] + "1", neighborIP, messageToNeighbors)

    # TODO
    #   a) update received from a customer: send updates to all other neighbors
    #   b) update received from a peer or provider: only send updates to our customers
    return False

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    # 1) save a copy of the revocation, in case we need it later
    # 2) remove the dead entry from the forwarding table
    # 3) potentially send copies of the announcement to neighboring routers
    #   a) update received from a customer: send revoke to all other neighbors
    #   b) update received from a peer or provider: only send revoke to our customers

    return True

  def dump(self, packet):
    """ handles dump table requests """
    dumpMessage = []
    for key in self.routes:
      dumpMessage.append({
        "network": self.routes[key]["network"],
        "netmask": self.routes[key]["netmask"],
        "peer": self.routes[key]["peer"]
      })
    dumpPacket = {
      "src":  packet["dst"],          
      "dst":  packet["src"],         
      "type": "table",                   
      "msg": dumpMessage
    }
    self.forward(packet["src"], dumpPacket)
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    messageType = packet["type"]
    if messageType == "update":
      return self.update(srcif, packet)
    elif messageType == "revoke":
      return self.revoke(packet)
    elif messageType == "data":
      socket = self.get_route(srcif, packet["dst"])
      print("our socket is :")
      print(socket)
      if socket:
        print("socket found")
        data = json.dumps(packet)
        socket.sendall(data.encode())
      else:
        print("socket not found")
        data = {
          "src":  srcif,         
          "dst":  packet["src"],          
          "type": "no route",                   
          "msg":  {}
        }
        print("sending this data: ")
        print(data)
        print("to this destination: ", srcif)
        self.forward(srcif, data)
      return 
    elif messageType == "no route":
      return 
    elif messageType == "dump":
      self.dump(packet)
      return
    elif messageType == "table":
      return
    else:
      return
    
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
