#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"     

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, networks):
    self.routes = {} # { }
    self.updates = {}
    self.relations = {}
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    
    # TODO
    outroutes = []
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    this.sockets[srcif].send(packet)
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    # TODO 
    
    # 1) save a copy of the announcement in case we need it later
    self.updates[packet.src] = packet.msg

    # 2) add an entry to our forwarding table
    self.routes[packet.src] = {"network" : "<ip_addr>", "netmask" : "<ip_addr_netmask>", "peer" : "<ip_addr>"}

    # 3) potentially send copies of the announcement to neighboring routers 'getRoute()'
    #   a) update received from a customer: send updates to all other neighbors
    #   b) update received from a peer or provider: only send updates to our customers

    return False

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO

    # 1) save a copy of the revocation, in case we need it later

    # 2) remove the dead entry from the forwarding table

    # 3) potentially send copies of the announcement to neighboring routers
    #   a) update received from a customer: send revoke to all other neighbors
    #   b) update received from a peer or provider: only send revoke to our customers

    return True

  def dump(self, packet):
    """ handles dump table requests """
    # TODO

    '''
    self.sockets[destIP].send([data below])
    {
      "src":  "<ip_addr>",          # Example: 72.65.0.1
      "dst":  "<ip_addr>",          # Example: 72.65.0.2
      "type": "table",                   
      "msg": \[
        {"network" : "<ip_addr>", "netmask" : "<ip_addr_netmask>", "peer" : "<ip_addr>"},
        {"network" : "<ip_addr>", "netmask" : "<ip_addr_netmask>", "peer" : "<ip_addr>"},
        ...
      \]
    }
    '''

    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    messageType = packet.type
    if (messageType == "update") {
      return self.update(srcif, packet)
    } elif (messageType == "revoke") {
      return self.revoke(packet)
    } elif (messageType == "data") {
      routeToSend = self.get_route(srcif, packet.dst)

      if routeToSend == None:
        
        noRoute = {
          "src":  srcif,          
          "dst":  packet.src,          
          "type": "no route",                   
          "msg":  {}
          }
        
        self.forward(srcif, noRoute)
      else:
        self.forward(srcif, packet)








      # all the following below takes place in 'getRoute()' method above

      # 0) if we dont have a route, send a "no route" message back to the source that sent us data

      # 1) if we know exactly one ppossible route, forward to the appropriate port

      # 2) then, we do longest prefix match on what we currently have in our forwarding table

      # 3) finally, 
      #   a) The path with the highest "localpref" wins. If the "localpref"s are equal...
      #   b) The path with "selfOrigin" = true wins. If all selfOrigins are the equal...
      #   c) The path with the shortest "ASPath" wins. If multiple routes have the shortest length...
      #   d) The path with the best "origin" wins, were IGP > EGP > UNK. If multiple routes have the best origin...
      #   e) The path from the neighbor router with the lowest IP address.

      # BUT should we forward or drop
      # 4) if the source or destination router is a customer, you should forward the data
      # 5) if the source router is a peer or a provider, and the destination is a peer or privider, then drop the data message
      #   a) in this case, send a "no route" message back to the source

    } elif (messageType == "no route") {
        
        
        
    } elif (messageType == "dump") {
      # 1) must respond with a "table" message that contains a copy of the current forwarding table in our router

    } elif (messageType == "table") {

    } else {

    }
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          print("my srcif is ")
          print(srcif)
          # if not self.handle_packet(srcif, msg):
          #   self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('ASN', metavar='asn', type=int, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.networks).run()
