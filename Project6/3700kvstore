#!/usr/bin/env python3

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

def get_random_timeout():
	#Return value between 150 and 300 ms
	return random.uniform(1, 3)

############################# PERSISTENT STATE ON ALL SERVERS
currentTerm = 0
votedFor = None
log=[{'term': 0}]

############################# VOLATILE STATE ON ALL SERVERS
commitIndex = 0
lastApplied = 0

############################# VOLATILE STATE ON LEADERS
nextIndex = 0
matchIndex = 0

############################# OTHER IMPORTANT VARIABLES
thisRole = "follower"
numberOfMachines = len(sys.argv) - 1 # TODO THIS ISNT USED
electionTimeout = get_random_timeout() 
lastEvent = time.time() # TODO THIS ISNT USED
currentLeader = "FFFF"
STORE = {}

'''
1) leader election
	after timeout, become candidate
	increment current term
	vote for self and send request vote to all servers
	if votes from majority
		become leader, send heartbeats
	elif RPC from leader
		become follower
	elif timeout
		return to start
2) normal operation
	client sends command to leader
	leader appends command to log
	leader sends append entries to all followers
		leader retries append entries until they succeed
	once entry is committed:
		leader executes command, and returns result to client
		notifies followers of committed entries in subsequent append entries 
		followers execute committed commands in their state machines
'''

############################# SEND MESSAGE METHODS
def send_msg(msg):
	# SENDS A MESSAGE TO THE DST OF THE MESSAGE GIVEN
	sock.sendall(json.dumps(msg).encode())

def send_to_all(msg):
	# SENDS A MESSAGE TO ALL DSTs IN REPLICA_IDS
	for id in replica_ids:
		msg['dst'] = id
		sock.sendall(json.dumps(msg).encode())	


############################# REQUEST VOTE RPC METHOD
def request_vote_rpc(term, candidateId, lastLogIndex, lastLogTerm):
	global currentTerm, votedFor
	if term < currentTerm:
		msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVoteResponse', "leader": currentLeader, 'data': False}
		print(str(my_id) + " DID NOT VOTE FOR " + str(candidateId))
		send_msg(msg)
		return
	elif votedFor == None or votedFor == candidateId:
		#grant vote
		votedFor = candidateId
		msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVoteResponse', "leader": currentLeader, 'data': True}
		print(str(my_id) + " VOTED FOR " + str(candidateId))
		send_msg(msg)
		return
	else:
		msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVoteResponse', "leader": currentLeader, 'data': False}
		print(str(my_id) + " DID NOT VOTE FOR " + str(candidateId))
		send_msg(msg)
		return

############################# APPEND ENTRIES RPC METHOD
def append_entries_rpc(term, leaderId, prevLogIndex, prevLogTerm, entries, leaderCommit):
	global log, my_id, lastEvent, currentLeader
	print(str(my_id) + " RECEIVED APPEND ENTRIES FROM " + str(leaderId))
	if term < currentTerm or log[prevLogIndex] != prevLogTerm: # TODO CATCH ERROR OUT OF BOUNDS INDEX
		msg = {'src': my_id, 'dst': leaderId, 'type': 'AppendEntriesResponse', "leader": currentLeader, 'success': False}
		send_msg(msg)
		return
	
	if log[prevLogIndex] == prevLogTerm: # TODO CATCH ERROR OUT OF BOUNDS INDEX
		msg = {'src': my_id, 'dst': leaderId, 'type': 'AppendEntriesResponse', "leader": currentLeader, 'success': True}
		send_msg(msg)
		currentLeader = leaderId
		lastEvent = time.time()
		return
	#else:
		# if logs are not equal
		# TODO
	if(leaderCommit > commitIndex):
		commitIndex = min(leaderCommit, len(log)-1)

############################# STATE TRANSITION METHODS
receivedVotes = []

def sendHeartbeat():
	global currentTerm, my_id, log, commitIndex
	data = {
		'term': currentTerm,
		'leaderId': my_id,
		'prevLogIndex': len(log) - 1,
		'prevLogTerm': log[len(log)-1]['term'],
		'entries': [],
		'leaderCommit': commitIndex
	}
	msg = {'src': my_id, 'dst': "None", 'type': 'AppendEntries', "leader": currentLeader, 'data': data}
	send_to_all(msg)

def begin_election():
	global votedFor, currentTerm, thisRole, receivedVotes
	receivedVotes = []
	#Increment current term
	currentTerm += 1
	#Change role to candidate
	thisRole = "candidate"
	#issues request vote to each of other servers
	votedFor = my_id
	data = {
		'term': currentTerm,
		'candidateId': my_id,
		'lastLogIndex': len(log) - 1,
		'lastLogTerm': log[len(log)-1]['term']
	}
	msg = {'src': my_id, 'dst': "None", 'type': 'RequestVote', "leader": currentLeader, 'data': data} # TODO MIGHT BREAK
	send_to_all(msg)
	print(str(msg))

def make_self_leader():
	global thisRole, currentLeader, receivedVotes
	print(str(my_id) + " BECAME A LEADER")
	thisRole = "leader"
	currentLeader = my_id
	receivedVotes = []
	sendHeartbeat()

############################# HANDLE RECEIVED MESSAGE METHODS
def handle_request_vote(msg):
	data = msg['data']
	request_vote_rpc(data['term'], data['candidateId'], data['lastLogIndex'], data['lastLogTerm'])
	
def handle_request_vote_response(msg):
	global thisRole, receivedVotes
	if thisRole == "candidate" and msg['dst'] == my_id:
		if msg['data'] == True:
			receivedVotes.append(msg['src'])
		if len(receivedVotes) > len(replica_ids)/2.0:
			make_self_leader() # TODO BE PREPARED TO HANDLE NOT GETTING HERE

def handle_append_entries(msg):
	global thisRole
	if thisRole != "follower":
		thisRole = "follower"
	data = msg['data']
	append_entries_rpc(data["term"], data["leaderId"], data["prevLogIndex"], data["prevLogTerm"], data["entries"], data["leaderCommit"])

# def handle_append_entries_response(msg):
# 	global thisRole
# 	goodResponse = {}
# 	if thisRole == "leader":
# 		goodResponse[currentTerm].append()
# 	if len(goodResponse[currentTerm]) > len(replica_ids)/2.0:
# 			print("enough good responses")
# 	else:
# 		print("not enough good responses")
		
	
############################# MAIN LOOP
while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] == 'get':
			'''
			{"src": "<ID>", 
			"dst": "<ID>", 
			"leader": "<ID>", 
			"type": "get", 
			"MID": "<a unique string>", 
			"key": "<some key>"}
			'''
			response = STORE["key"] # will be a value or 'None'
			print("trying to retreive value from key: " + msg["key"])
			if response:
				print("retreived value: " + response + ", from key: " + msg["key"])
				# {"src": "<ID>", "dst": "<ID>", "leader": "<ID>", "type": "ok", "MID": "<a unique string>", "value": "<value of the key>"}
				reply = {'src': my_id, 'dst': msg["src"], "leader": currentLeader, 'type': 'ok', "MID": msg["MID"], "value": response} 
				send_msg(reply)
			else:
				print("retreived no value from key: " + msg["key"])
				# {"src": "<ID>", "dst": "<ID>", "leader": "<ID>", "type": "fail", "MID": "<a unique string>"}
				reply = {'src': my_id, 'dst': msg["src"], "leader": currentLeader, 'type': 'fail', "MID": msg["MID"]} 
				send_msg(reply)

		elif msg['type'] == 'put':
			'''
			{"src": "<ID>", 
			"dst": "<ID>", 
			"leader": "<ID>", 
			"type": "put", 
			"MID": "<a unique string>", 
			"key": "<some key>", 
			"value": "<value of the key>"}
			'''
			STORE[msg["key"]] = msg["value"]
			print("put key " + msg["key"] + " into store with value " + msg["value"])
			reply = {'src': my_id, 'dst': msg["src"], "leader": currentLeader, 'type': 'ok', "MID": msg["MID"]} 
			send_msg(reply)
			# TODO IN THE FUTURE ACCOUNT FOR 'TYPE FAIL'
		
		elif msg['type'] == "RequestVote":
			handle_request_vote(msg)

		elif msg['type'] == "RequestVoteResponse":
			handle_request_vote_response(msg)
   
		elif msg['type'] == "AppendEntries":
			handle_append_entries(msg)

		elif msg['type'] == "AppendEntriesResponse":
			print("handle_append_entries_response(msg)")

		elif msg['type'] == "redirect":
			print("redirecting to leader")

	clock = time.time()

	if clock-lastEvent > electionTimeout/2 and thisRole == "leader":
		lastEvent = clock
		sendHeartbeat()
		

	if clock-lastEvent > electionTimeout:
		lastEvent = clock
		if thisRole != "leader":
			begin_election()
			

		# # Send a no-op message to a random peer every two seconds, just for fun
		# # You definitely want to remove this from your implementation
		# msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		# sock.send(json.dumps(msg))
		# print(msg['src'] + ' sending a NOOP to ' + msg['dst'])
		# last = clock
