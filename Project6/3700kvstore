#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

#Temporary storage
received = []
log=[{'term': 0}]
current_term = 0
voted_for = None

def get_random_timeout():
	#Return value between 150 and 300 ms
	return random.uniform(150,300)

#Election
this_role = "follower"
number_of_machines = len(sys.argv) - 1
election_timeout = get_random_timeout()
last_event = time.time()


########## ELECTION METHODS 

def send_to_all(msg):
	ready = select.select([], [sock], [], 0.1)[1]
	for id in replica_ids:
		
		

def request_vote_rpc(term, candidateId, lastLogIndex, lastLogterm):
	global current_term
	if term < current_term:
		send_to_all('{"type": "RequestVote", ""}')
	if voted_for == null or voted_for == my_id:
		#grant vote
		voted_for = candidateId

def begin_election():
	global voted_for, current_term, this_role
	#Increment current term
	current_term += 1
	#Change role to candidate
	this_role = "candidate"
	#issues request vote to each of other servers
	voted_for = my_id




def nominate_for_election():
	this_role = "candidate"
	current_term += 1
	election_timeout = get_random_timeout()
	last_event = time.time()

########## MSG Handling


########## UTILITY METHODS

def send_msg(sock, msg):
	return sock.send(msg)

def log_is_current(lastTerm, lastIndex):
	global log
	this_last_term = log[-1]['term']
	if this_last_term < lastTerm:
		return True
	elif this_last_term > lastTerm:
		return False
	else:
		return len(log) -1 <= lastIndex

def add_headers(msg, dst, _type)
	global my_id, leader
	msg['dst'] = dst
	msg['type'] = _type
	





while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] in ['get', 'put']:
			print("Received get/put")
		
		# Handle noop messages. This may be removed from your final implementation
		elif msg['type'] == 'noop':
			print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
		
	clock = time.time()
	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
