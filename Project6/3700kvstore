#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

#Temporary storage
received = []


leader = 'FFFF'

current_term = 0
voted_for = None
log=[{'term': 0, 'command': 'remain follower'}]



commitIndex = 0
lastApplied = 0

nextIndex = 0
matchIndex = 0



########## UTILITY METHODS

def send_msg(msg):
	sock.send(json.dumps(msg))

def log_is_current(lastTerm, lastIndex):
	global log
	this_last_term = log[-1]['term']
	if this_last_term < lastTerm:
		return True
	elif this_last_term > lastTerm:
		return False
	else:
		return len(log) -1 <= lastIndex

def add_headers(msg, dst, _type)
	global my_id, leader
	msg['dst'] = dst
	msg['type'] = _type


def get_random_timeout():
	#Return value between 150 and 300 ms
	return random.uniform(150,300)


def send_to_all(msg):
	for id in replica_ids:
		msg['dst'] = id
		sock.send(json.dumps(msg))

#Election
this_role = "follower"
number_of_machines = len(sys.argv) - 1
election_timeout = get_random_timeout()
last_event = time.time()


########## ELECTION METHODS 	

def request_vote_rpc(term, candidateId, lastLogIndex, lastLogTerm):
	global current_term
	if term < current_term:
		msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVoteResponse', 'data': False}
		send_msg(msg)
		return
	if voted_for == null or voted_for == candidateId:
		#grant vote
		voted_for = candidateId
		msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVoteResponse', 'data': True}
		send_msg(msg)
		return

def append_entries_rpc(term, leaderId, prevLogIndex, prevLogTerm, entries, leaderCommit):
	if term < current_term or log[prevLogIndex] != prevLogTerm:
		msg = {'src': my_id, 'dst': candidateId, 'type': 'AppendEntriesResponse', 'success': False}
		send_msg(msg)
		return
	
	if log[prevLogIndex] = prevLogTerm:
		msg = {'src': my_id, 'dst': candidateId, 'type': 'AppendEntriesResponse', 'success': True}
	
	if len(entries) == 0:
		log = []

	for i in range(len(log)):
		this_entry = log[i]
		if i < len(entries):
			that_entry = entries[i]

			if this_entry['term'] != that_entry['term']:
				log = log[:i]
				log.append(entries[i:])
				break
		else: 
			break
	if(leaderCommit > commitIndex):
		commitIndex = min(leaderCommit, len(log)-1)

def begin_election():
	global voted_for, current_term, this_role
	#Increment current term
	current_term += 1
	#Change role to candidate
	this_role = "candidate"
	#issues request vote to each of other servers
	voted_for = my_id
	data = {
		'term': current_term,
		'candidateId': my_id,
		'lastLogIndex': len(log) -1,
		'lastLogTerm': log[len(log)-1]['term']
	}
	msg = {'src': my_id, 'dst': candidateId, 'type': 'RequestVote', 'data': data}
	send_to_all(msg)
	print(str(msg))

def make_self_leader():
	global this_role, leader, received_votes

	this_role = "leader"
	leader = my_id
	received_votes = {}

	data = {
		'term': current_term,
		'leaderId': my_id,
		'prevLogIndex': len(log) -1,
		'prevLogTerm': log[len(log)-1]['term'],
		'entries': [],
		'leaderCommit'
	}

	msg = {'src': my_id, 'dst': candidateId, 'type': 'AppendEntries', 'data': data}
	send_to_all

########## MSG Handling

def handle_request_vote(msg):
	request_vote_rpc(msg['data']['term'], msg['data']['candidateId'], msg['data']['lastLogIndex'], msg['data']['lastLogTerm'])
	
received_votes = {}
def handle_request_vote_response(msg):
	global this_role
	if this_role == "candidate":
		if msg['data'] == True:
			received_votes.add(msg['src'])
			if len(received_votes) > len(replica_ids)/2.0:
				make_self_leader()
	




while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] in ['get', 'put']:
			msg = {'src': my_id, 'dst': msg['src'], 'type': 'fail'}
			send_to_all(msg)
		
		# Handle noop messages. This may be removed from your final implementation
		elif msg['type'] == 'noop':
			print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
		
		elif msg['type'] == "RequestVote":
			handle_request_vote(msg)

		elif msg['type'] == "RequestVoteResponse":
			handle_request_vote_response(msg)

	clock = time.time()
	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
